apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'nexus'

def compatibilityVersion = 1.7
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion
group = 'com.google.appengine'
version = '1.9.0'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
    }
}

repositories {
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile "com.google.appengine:appengine-local-endpoints:${version}"
    compile 'com.google.guava:guava:16.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle App Engine plugin',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

idea.project {
    jdkName = '1.6'

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

modifyPom {
    project {
        name 'Gradle App Engine plugin'
        description 'Gradle plugin that provides tasks for uploading, running and managing Google App Engine projects.'
        url 'https://github.com/GoogleCloudPlatform/gradle-appengine-plugin'
        inceptionYear '2011'

        scm {
            url 'https://github.com/GoogleCloudPlatform/gradle-appengine-plugin'
            connection 'scm:https://mattstep@github.com/GoogleCloudPlatform/gradle-appengine-plugin.git'
            developerConnection 'scm:git://github.com/GoogleCloudPlatform/gradle-appengine-plugin.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'mattstep'
                name 'Matt Stephenson'
                email 'mattstep@google.com'
            }
            developer {
                id 'bmuschko'
                name 'Benjamin Muschko'
                email 'benjamin.muschko@gmail.com'
            }
            developer {
                id 'erdi'
                name 'Marcin Erdmann'
            }
            developer {
                id 'loosebazooka'
                name 'Appu Goundan'
                email 'appu@google.com'
            }
        }
    }
}

task snapshot << {
}

test {
    systemProperty "appengine.version", "${version}"
    systemProperty "appengine.pluginversion", "${version}"
}.dependsOn install

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(snapshot)) {
        version = "${version}-SNAPSHOT"
        if (taskGraph.hasTask(test)) {
          project.test.systemProperty "appengine.pluginversion", "${version}"
        }
    }
    else if (taskGraph.allTasks.any { it instanceof Sign }) {
        Console console = System.console()
        console.printf "\n\nPGP credentials required to sign artifacts prior to uploading.\n\n"

        def id = console.readLine("PGP Key Id: ")
        def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }
    }
}
